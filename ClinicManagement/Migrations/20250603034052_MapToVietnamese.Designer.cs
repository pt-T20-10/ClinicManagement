// <auto-generated />
using System;
using ClinicManagement.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicManagement.Migrations
{
    [DbContext(typeof(ClinicDbContext))]
    [Migration("20250603034052_MapToVietnamese")]
    partial class MapToVietnamese
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicManagement.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TenDangNhap");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("MaBacSi");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<bool?>("IsLogined")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaDangNhap");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("MatKhau");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("VaiTro");

                    b.HasKey("Username")
                        .HasName("PK_TaiKhoan");

                    b.HasIndex("DoctorId");

                    b.ToTable("TaiKhoan", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaLichHen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("NgayHen");

                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("MaLoaiLichHen");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayTao")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("MaBacSi");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("GhiChu");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("MaBenhNhan");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TrangThai");

                    b.HasKey("AppointmentId")
                        .HasName("PK_LichHen");

                    b.HasIndex("AppointmentTypeId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("LichHen", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.AppointmentType", b =>
                {
                    b.Property<int>("AppointmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaLoaiLichHen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentTypeId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MoTa");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TenLoai");

                    b.HasKey("AppointmentTypeId")
                        .HasName("PK_LoaiLichHen");

                    b.ToTable("LoaiLichHen", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaBacSi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateLink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LinkChungChi");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HoTen");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SoDienThoai");

                    b.Property<string>("Schedule")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LichLamViec");

                    b.Property<int?>("SpecialtyId")
                        .HasColumnType("int")
                        .HasColumnName("MaChuyenKhoa");

                    b.HasKey("DoctorId")
                        .HasName("PK_BacSi");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("BacSi", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaChuyenKhoa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialtyId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MoTa");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TenChuyenKhoa");

                    b.HasKey("SpecialtyId")
                        .HasName("PK_ChuyenKhoaBacSi");

                    b.ToTable("ChuyenKhoaBacSi", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaHoaDon");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime?>("InvoiceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayLapHoaDon")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("IsPharmacySale")
                        .HasColumnType("bit");

                    b.Property<int?>("MedicalRecordId")
                        .HasColumnType("int")
                        .HasColumnName("MaHoSoBenhAn");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("GhiChu");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("MaBenhNhan");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TrangThai");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("TongTien");

                    b.HasKey("InvoiceId")
                        .HasName("PK_HoaDon");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PatientId");

                    b.ToTable("HoaDon", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.InvoiceDetail", b =>
                {
                    b.Property<int>("DetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaChiTiet");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetailsId"));

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("GiamGia");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("MaHoaDon");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("MaThuoc");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("SoLuong");

                    b.Property<decimal>("SalePrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("GiaBan");

                    b.Property<int>("StockInId")
                        .HasColumnType("int")
                        .HasColumnName("MaNhapKho");

                    b.HasKey("DetailsId")
                        .HasName("PK_ChiTietHoaDon");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("StockInId");

                    b.ToTable("ChiTietHoaDon", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaHoSo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChanDoan");

                    b.Property<string>("DoctorAdvice")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("LoiKhuyenBacSi");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int")
                        .HasColumnName("MaBacSi");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("MaBenhNhan");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DonThuoc");

                    b.Property<DateTime?>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayTao")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TestResults")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("KetQuaXetNghiem");

                    b.HasKey("RecordId")
                        .HasName("PK_HoSoBenhAn");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("HoSoBenhAn", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaThuoc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineId"));

                    b.Property<string>("BarCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MaVach");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("MaDanhMuc");

                    b.Property<DateOnly?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("Mshnnb")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MSHNNB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TenThuoc");

                    b.Property<string>("QrCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MaQR");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int")
                        .HasColumnName("MaNhaCungCap");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("MaDonVi");

                    b.HasKey("MedicineId")
                        .HasName("PK_Thuoc");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitId");

                    b.ToTable("Thuoc", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.MedicineCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaDanhMuc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TenDanhMuc");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MoTa");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.HasKey("CategoryId")
                        .HasName("PK_DanhMucThuoc");

                    b.ToTable("DanhMucThuoc", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaThongBao");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int")
                        .HasColumnName("MaLichHen");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("NoiDung");

                    b.Property<string>("Method")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("PhuongThuc");

                    b.Property<DateTime?>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayGui")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TrangThai");

                    b.HasKey("NotificationId")
                        .HasName("PK_ThongBao");

                    b.HasIndex("AppointmentId");

                    b.ToTable("ThongBao", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaBenhNhan");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DiaChi");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayTao")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("NgaySinh");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("HoTen");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("GioiTinh");

                    b.Property<string>("InsuranceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("MaSoBaoHiem");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<int?>("PatientTypeId")
                        .HasColumnType("int")
                        .HasColumnName("MaLoaiBenhNhan");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SoDienThoai");

                    b.HasKey("PatientId")
                        .HasName("PK_BenhNhan");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("BenhNhan", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.PatientType", b =>
                {
                    b.Property<int>("PatientTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaLoaiBenhNhan");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientTypeId"));

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5, 2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("GiamGia");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TenLoai");

                    b.HasKey("PatientTypeId")
                        .HasName("PK_LoaiBenhNhan");

                    b.ToTable("LoaiBenhNhan", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaKho");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayCapNhat")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("MaThuoc");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("TonKho");

                    b.HasKey("StockId")
                        .HasName("PK_KhoThuoc");

                    b.HasIndex("MedicineId");

                    b.ToTable("KhoThuoc", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.StockIn", b =>
                {
                    b.Property<int>("StockInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaNhapKho");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockInId"));

                    b.Property<DateTime?>("ImportDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("NgayNhap")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int")
                        .HasColumnName("MaThuoc");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("SoLuong");

                    b.Property<decimal?>("SellPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("GiaBan");

                    b.Property<decimal?>("TotalCost")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(29, 2)")
                        .HasColumnName("ThanhTien")
                        .HasComputedColumnSql("([SoLuong]*[DonGia])", false);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("DonGia");

                    b.HasKey("StockInId")
                        .HasName("PK_NhapKho");

                    b.HasIndex("MedicineId");

                    b.ToTable("NhapKho", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaNhaCungCap");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("DiaChi");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("NguoiLienHe");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Email");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DangHoatDong");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("SoDienThoai");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MaSoNhaCungCap");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("TenNhaCungCap");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("MaSoThue");

                    b.HasKey("SupplierId")
                        .HasName("PK_NhaCungCap");

                    b.ToTable("NhaCungCap", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MaDonVi");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UnitId"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MoTa");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("DaXoa");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("TenDonVi");

                    b.HasKey("UnitId")
                        .HasName("PK_DonVi");

                    b.ToTable("DonVi", (string)null);
                });

            modelBuilder.Entity("ClinicManagement.Models.Account", b =>
                {
                    b.HasOne("ClinicManagement.Models.Doctor", "Doctor")
                        .WithMany("Accounts")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_TaiKhoan_BacSi");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("ClinicManagement.Models.Appointment", b =>
                {
                    b.HasOne("ClinicManagement.Models.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_LichHen_LoaiLichHen");

                    b.HasOne("ClinicManagement.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_LichHen_BacSi");

                    b.HasOne("ClinicManagement.Models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_LichHen_BenhNhan");

                    b.Navigation("AppointmentType");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.Doctor", b =>
                {
                    b.HasOne("ClinicManagement.Models.DoctorSpecialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .HasConstraintName("FK_BacSi_ChuyenKhoa");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("ClinicManagement.Models.Invoice", b =>
                {
                    b.HasOne("ClinicManagement.Models.MedicalRecord", "MedicalRecord")
                        .WithMany("Invoices")
                        .HasForeignKey("MedicalRecordId")
                        .HasConstraintName("FK_HoaDon_HoSoBenhAn");

                    b.HasOne("ClinicManagement.Models.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_HoaDon_BenhNhan");

                    b.Navigation("MedicalRecord");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.InvoiceDetail", b =>
                {
                    b.HasOne("ClinicManagement.Models.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .IsRequired()
                        .HasConstraintName("FK_ChiTietHoaDon_HoaDon");

                    b.HasOne("ClinicManagement.Models.Medicine", "Medicine")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_ChiTietHoaDon_Thuoc");

                    b.HasOne("ClinicManagement.Models.StockIn", "StockIn")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("StockInId")
                        .IsRequired()
                        .HasConstraintName("FK_ChiTietHoaDon_NhapKho");

                    b.Navigation("Invoice");

                    b.Navigation("Medicine");

                    b.Navigation("StockIn");
                });

            modelBuilder.Entity("ClinicManagement.Models.MedicalRecord", b =>
                {
                    b.HasOne("ClinicManagement.Models.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("FK_HoSoBenhAn_BacSi");

                    b.HasOne("ClinicManagement.Models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK_HoSoBenhAn_BenhNhan");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ClinicManagement.Models.Medicine", b =>
                {
                    b.HasOne("ClinicManagement.Models.MedicineCategory", "Category")
                        .WithMany("Medicines")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Thuoc_DanhMucThuoc");

                    b.HasOne("ClinicManagement.Models.Supplier", "Supplier")
                        .WithMany("Medicines")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_Thuoc_NhaCungCap");

                    b.HasOne("ClinicManagement.Models.Unit", "Unit")
                        .WithMany("Medicines")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_Thuoc_DonVi");

                    b.Navigation("Category");

                    b.Navigation("Supplier");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("ClinicManagement.Models.Notification", b =>
                {
                    b.HasOne("ClinicManagement.Models.Appointment", "Appointment")
                        .WithMany("Notifications")
                        .HasForeignKey("AppointmentId")
                        .IsRequired()
                        .HasConstraintName("FK_ThongBao_LichHen");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("ClinicManagement.Models.Patient", b =>
                {
                    b.HasOne("ClinicManagement.Models.PatientType", "PatientType")
                        .WithMany("Patients")
                        .HasForeignKey("PatientTypeId")
                        .HasConstraintName("FK_BenhNhan_LoaiBenhNhan");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("ClinicManagement.Models.Stock", b =>
                {
                    b.HasOne("ClinicManagement.Models.Medicine", "Medicine")
                        .WithMany("Stocks")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_KhoThuoc_Thuoc");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ClinicManagement.Models.StockIn", b =>
                {
                    b.HasOne("ClinicManagement.Models.Medicine", "Medicine")
                        .WithMany("StockIns")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("FK_NhapKho_Thuoc");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("ClinicManagement.Models.Appointment", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ClinicManagement.Models.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("ClinicManagement.Models.Doctor", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Appointments");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Models.DoctorSpecialty", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("ClinicManagement.Models.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("ClinicManagement.Models.MedicalRecord", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("ClinicManagement.Models.Medicine", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("StockIns");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("ClinicManagement.Models.MedicineCategory", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ClinicManagement.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Invoices");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("ClinicManagement.Models.PatientType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("ClinicManagement.Models.StockIn", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("ClinicManagement.Models.Supplier", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("ClinicManagement.Models.Unit", b =>
                {
                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
